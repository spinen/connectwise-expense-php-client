<?php
/**
 * ExpenseEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Expense
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Expense API
 *
 * ConnectWise Expense API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Expense\Model;

use \ArrayAccess;

/**
 * ExpenseEntry Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Expense
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ExpenseEntry implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ExpenseEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company' => '\Spinen\ConnectWise\Clients\Expense\Model\CompanyReference',
        'charge_to_id' => 'int',
        'charge_to_type' => 'string',
        'type' => '\Spinen\ConnectWise\Clients\Expense\Model\ExpenseTypeReference',
        'member' => '\Spinen\ConnectWise\Clients\Expense\Model\MemberReference',
        'payment_method' => '\Spinen\ConnectWise\Clients\Expense\Model\PaymentMethodReference',
        'classification' => '\Spinen\ConnectWise\Clients\Expense\Model\ClassificationReference',
        'amount' => 'double',
        'billable_option' => 'string',
        'date' => '\DateTime',
        'location_id' => 'int',
        'business_unit_id' => 'int',
        'notes' => 'string',
        'agreement' => '\Spinen\ConnectWise\Clients\Expense\Model\AgreementReference',
        'invoice_amount' => 'double',
        'taxes' => '\Spinen\ConnectWise\Clients\Expense\Model\ExpenseTax[]',
        'invoice' => '\Spinen\ConnectWise\Clients\Expense\Model\InvoiceReference',
        '_info' => '\Spinen\ConnectWise\Clients\Expense\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company' => 'company',
        'charge_to_id' => 'chargeToId',
        'charge_to_type' => 'chargeToType',
        'type' => 'type',
        'member' => 'member',
        'payment_method' => 'paymentMethod',
        'classification' => 'classification',
        'amount' => 'amount',
        'billable_option' => 'billableOption',
        'date' => 'date',
        'location_id' => 'locationId',
        'business_unit_id' => 'businessUnitId',
        'notes' => 'notes',
        'agreement' => 'agreement',
        'invoice_amount' => 'invoiceAmount',
        'taxes' => 'taxes',
        'invoice' => 'invoice',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company' => 'setCompany',
        'charge_to_id' => 'setChargeToId',
        'charge_to_type' => 'setChargeToType',
        'type' => 'setType',
        'member' => 'setMember',
        'payment_method' => 'setPaymentMethod',
        'classification' => 'setClassification',
        'amount' => 'setAmount',
        'billable_option' => 'setBillableOption',
        'date' => 'setDate',
        'location_id' => 'setLocationId',
        'business_unit_id' => 'setBusinessUnitId',
        'notes' => 'setNotes',
        'agreement' => 'setAgreement',
        'invoice_amount' => 'setInvoiceAmount',
        'taxes' => 'setTaxes',
        'invoice' => 'setInvoice',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company' => 'getCompany',
        'charge_to_id' => 'getChargeToId',
        'charge_to_type' => 'getChargeToType',
        'type' => 'getType',
        'member' => 'getMember',
        'payment_method' => 'getPaymentMethod',
        'classification' => 'getClassification',
        'amount' => 'getAmount',
        'billable_option' => 'getBillableOption',
        'date' => 'getDate',
        'location_id' => 'getLocationId',
        'business_unit_id' => 'getBusinessUnitId',
        'notes' => 'getNotes',
        'agreement' => 'getAgreement',
        'invoice_amount' => 'getInvoiceAmount',
        'taxes' => 'getTaxes',
        'invoice' => 'getInvoice',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CHARGE_TO_TYPE_SERVICE_TICKET = 'ServiceTicket';
    const CHARGE_TO_TYPE_PROJECT_TICKET = 'ProjectTicket';
    const CHARGE_TO_TYPE_CHARGE_CODE = 'ChargeCode';
    const CHARGE_TO_TYPE_ACTIVITY = 'Activity';
    const BILLABLE_OPTION_BILLABLE = 'Billable';
    const BILLABLE_OPTION_DO_NOT_BILL = 'DoNotBill';
    const BILLABLE_OPTION_NO_CHARGE = 'NoCharge';
    const BILLABLE_OPTION_NO_DEFAULT = 'NoDefault';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getChargeToTypeAllowableValues()
    {
        return [
            self::CHARGE_TO_TYPE_SERVICE_TICKET,
            self::CHARGE_TO_TYPE_PROJECT_TICKET,
            self::CHARGE_TO_TYPE_CHARGE_CODE,
            self::CHARGE_TO_TYPE_ACTIVITY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillableOptionAllowableValues()
    {
        return [
            self::BILLABLE_OPTION_BILLABLE,
            self::BILLABLE_OPTION_DO_NOT_BILL,
            self::BILLABLE_OPTION_NO_CHARGE,
            self::BILLABLE_OPTION_NO_DEFAULT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['charge_to_id'] = isset($data['charge_to_id']) ? $data['charge_to_id'] : null;
        $this->container['charge_to_type'] = isset($data['charge_to_type']) ? $data['charge_to_type'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['member'] = isset($data['member']) ? $data['member'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['classification'] = isset($data['classification']) ? $data['classification'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['billable_option'] = isset($data['billable_option']) ? $data['billable_option'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['agreement'] = isset($data['agreement']) ? $data['agreement'] : null;
        $this->container['invoice_amount'] = isset($data['invoice_amount']) ? $data['invoice_amount'] : null;
        $this->container['taxes'] = isset($data['taxes']) ? $data['taxes'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["ServiceTicket", "ProjectTicket", "ChargeCode", "Activity"];
        if (!in_array($this->container['charge_to_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'charge_to_type', must be one of #{allowed_values}.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalid_properties[] = "'amount' can't be null";
        }
        if ($this->container['billable_option'] === null) {
            $invalid_properties[] = "'billable_option' can't be null";
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['billable_option'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'billable_option', must be one of #{allowed_values}.";
        }

        if ($this->container['date'] === null) {
            $invalid_properties[] = "'date' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["ServiceTicket", "ProjectTicket", "ChargeCode", "Activity"];
        if (!in_array($this->container['charge_to_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['amount'] === null) {
            return false;
        }
        if ($this->container['billable_option'] === null) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['billable_option'], $allowed_values)) {
            return false;
        }
        if ($this->container['date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Expense\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Expense\Model\CompanyReference $company Company or chargeToType is required
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets charge_to_id
     * @return int
     */
    public function getChargeToId()
    {
        return $this->container['charge_to_id'];
    }

    /**
     * Sets charge_to_id
     * @param int $charge_to_id
     * @return $this
     */
    public function setChargeToId($charge_to_id)
    {
        $this->container['charge_to_id'] = $charge_to_id;

        return $this;
    }

    /**
     * Gets charge_to_type
     * @return string
     */
    public function getChargeToType()
    {
        return $this->container['charge_to_type'];
    }

    /**
     * Sets charge_to_type
     * @param string $charge_to_type Company or chargeToType is required
     * @return $this
     */
    public function setChargeToType($charge_to_type)
    {
        $allowed_values = array('ServiceTicket', 'ProjectTicket', 'ChargeCode', 'Activity');
        if (!is_null($charge_to_type) && (!in_array($charge_to_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'charge_to_type', must be one of 'ServiceTicket', 'ProjectTicket', 'ChargeCode', 'Activity'");
        }
        $this->container['charge_to_type'] = $charge_to_type;

        return $this;
    }

    /**
     * Gets type
     * @return \Spinen\ConnectWise\Clients\Expense\Model\ExpenseTypeReference
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Spinen\ConnectWise\Clients\Expense\Model\ExpenseTypeReference $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets member
     * @return \Spinen\ConnectWise\Clients\Expense\Model\MemberReference
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     * @param \Spinen\ConnectWise\Clients\Expense\Model\MemberReference $member
     * @return $this
     */
    public function setMember($member)
    {
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets payment_method
     * @return \Spinen\ConnectWise\Clients\Expense\Model\PaymentMethodReference
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     * @param \Spinen\ConnectWise\Clients\Expense\Model\PaymentMethodReference $payment_method
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets classification
     * @return \Spinen\ConnectWise\Clients\Expense\Model\ClassificationReference
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     * @param \Spinen\ConnectWise\Clients\Expense\Model\ClassificationReference $classification
     * @return $this
     */
    public function setClassification($classification)
    {
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets amount
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param double $amount
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets billable_option
     * @return string
     */
    public function getBillableOption()
    {
        return $this->container['billable_option'];
    }

    /**
     * Sets billable_option
     * @param string $billable_option
     * @return $this
     */
    public function setBillableOption($billable_option)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if ((!in_array($billable_option, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'billable_option', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['billable_option'] = $billable_option;

        return $this;
    }

    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param \DateTime $date
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     * @param int $business_unit_id
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets agreement
     * @return \Spinen\ConnectWise\Clients\Expense\Model\AgreementReference
     */
    public function getAgreement()
    {
        return $this->container['agreement'];
    }

    /**
     * Sets agreement
     * @param \Spinen\ConnectWise\Clients\Expense\Model\AgreementReference $agreement
     * @return $this
     */
    public function setAgreement($agreement)
    {
        $this->container['agreement'] = $agreement;

        return $this;
    }

    /**
     * Gets invoice_amount
     * @return double
     */
    public function getInvoiceAmount()
    {
        return $this->container['invoice_amount'];
    }

    /**
     * Sets invoice_amount
     * @param double $invoice_amount
     * @return $this
     */
    public function setInvoiceAmount($invoice_amount)
    {
        $this->container['invoice_amount'] = $invoice_amount;

        return $this;
    }

    /**
     * Gets taxes
     * @return \Spinen\ConnectWise\Clients\Expense\Model\ExpenseTax[]
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     * @param \Spinen\ConnectWise\Clients\Expense\Model\ExpenseTax[] $taxes
     * @return $this
     */
    public function setTaxes($taxes)
    {
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets invoice
     * @return \Spinen\ConnectWise\Clients\Expense\Model\InvoiceReference
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     * @param \Spinen\ConnectWise\Clients\Expense\Model\InvoiceReference $invoice
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Expense\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Expense\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Expense\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Expense\ObjectSerializer::sanitizeForSerialization($this));
    }
}


