<?php
/**
 * ExpenseType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Expense
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Expense API
 *
 * ConnectWise Expense API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Expense\Spinen\ConnectWise\Clients\Expense\Model;

use \ArrayAccess;

/**
 * ExpenseType Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Expense
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ExpenseType implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ExpenseType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'amount_caption' => 'string',
        'reimbursement_rate' => 'double',
        'bill_expenses' => 'string',
        'invoice_markup_option' => 'string',
        'invoice_markup_amount' => 'double',
        'advanced_amount_flag' => 'bool',
        'mileage_flag' => 'bool',
        'quantity_flag' => 'bool',
        'inactive_flag' => 'bool',
        'max_amount' => 'double',
        '_info' => '\Spinen\ConnectWise\Clients\Expense\Spinen\ConnectWise\Clients\Expense\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'amount_caption' => 'amountCaption',
        'reimbursement_rate' => 'reimbursementRate',
        'bill_expenses' => 'billExpenses',
        'invoice_markup_option' => 'invoiceMarkupOption',
        'invoice_markup_amount' => 'invoiceMarkupAmount',
        'advanced_amount_flag' => 'advancedAmountFlag',
        'mileage_flag' => 'mileageFlag',
        'quantity_flag' => 'quantityFlag',
        'inactive_flag' => 'inactiveFlag',
        'max_amount' => 'maxAmount',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'amount_caption' => 'setAmountCaption',
        'reimbursement_rate' => 'setReimbursementRate',
        'bill_expenses' => 'setBillExpenses',
        'invoice_markup_option' => 'setInvoiceMarkupOption',
        'invoice_markup_amount' => 'setInvoiceMarkupAmount',
        'advanced_amount_flag' => 'setAdvancedAmountFlag',
        'mileage_flag' => 'setMileageFlag',
        'quantity_flag' => 'setQuantityFlag',
        'inactive_flag' => 'setInactiveFlag',
        'max_amount' => 'setMaxAmount',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'amount_caption' => 'getAmountCaption',
        'reimbursement_rate' => 'getReimbursementRate',
        'bill_expenses' => 'getBillExpenses',
        'invoice_markup_option' => 'getInvoiceMarkupOption',
        'invoice_markup_amount' => 'getInvoiceMarkupAmount',
        'advanced_amount_flag' => 'getAdvancedAmountFlag',
        'mileage_flag' => 'getMileageFlag',
        'quantity_flag' => 'getQuantityFlag',
        'inactive_flag' => 'getInactiveFlag',
        'max_amount' => 'getMaxAmount',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const BILL_EXPENSES_BILLABLE = 'Billable';
    const BILL_EXPENSES_DO_NOT_BILL = 'DoNotBill';
    const BILL_EXPENSES_NO_CHARGE = 'NoCharge';
    const INVOICE_MARKUP_OPTION_PERCENT = 'Percent';
    const INVOICE_MARKUP_OPTION_AMOUNT = 'Amount';
    const INVOICE_MARKUP_OPTION_MILE = 'Mile';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillExpensesAllowableValues()
    {
        return [
            self::BILL_EXPENSES_BILLABLE,
            self::BILL_EXPENSES_DO_NOT_BILL,
            self::BILL_EXPENSES_NO_CHARGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getInvoiceMarkupOptionAllowableValues()
    {
        return [
            self::INVOICE_MARKUP_OPTION_PERCENT,
            self::INVOICE_MARKUP_OPTION_AMOUNT,
            self::INVOICE_MARKUP_OPTION_MILE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['amount_caption'] = isset($data['amount_caption']) ? $data['amount_caption'] : null;
        $this->container['reimbursement_rate'] = isset($data['reimbursement_rate']) ? $data['reimbursement_rate'] : null;
        $this->container['bill_expenses'] = isset($data['bill_expenses']) ? $data['bill_expenses'] : null;
        $this->container['invoice_markup_option'] = isset($data['invoice_markup_option']) ? $data['invoice_markup_option'] : null;
        $this->container['invoice_markup_amount'] = isset($data['invoice_markup_amount']) ? $data['invoice_markup_amount'] : null;
        $this->container['advanced_amount_flag'] = isset($data['advanced_amount_flag']) ? $data['advanced_amount_flag'] : null;
        $this->container['mileage_flag'] = isset($data['mileage_flag']) ? $data['mileage_flag'] : null;
        $this->container['quantity_flag'] = isset($data['quantity_flag']) ? $data['quantity_flag'] : null;
        $this->container['inactive_flag'] = isset($data['inactive_flag']) ? $data['inactive_flag'] : null;
        $this->container['max_amount'] = isset($data['max_amount']) ? $data['max_amount'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 30)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['amount_caption'] === null) {
            $invalid_properties[] = "'amount_caption' can't be null";
        }
        if ($this->container['bill_expenses'] === null) {
            $invalid_properties[] = "'bill_expenses' can't be null";
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge"];
        if (!in_array($this->container['bill_expenses'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_expenses', must be one of #{allowed_values}.";
        }

        if ($this->container['invoice_markup_option'] === null) {
            $invalid_properties[] = "'invoice_markup_option' can't be null";
        }
        $allowed_values = ["Percent", "Amount", "Mile"];
        if (!in_array($this->container['invoice_markup_option'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'invoice_markup_option', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 30) {
            return false;
        }
        if ($this->container['amount_caption'] === null) {
            return false;
        }
        if ($this->container['bill_expenses'] === null) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge"];
        if (!in_array($this->container['bill_expenses'], $allowed_values)) {
            return false;
        }
        if ($this->container['invoice_markup_option'] === null) {
            return false;
        }
        $allowed_values = ["Percent", "Amount", "Mile"];
        if (!in_array($this->container['invoice_markup_option'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ExpenseType., must be smaller than or equal to 30.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets amount_caption
     * @return string
     */
    public function getAmountCaption()
    {
        return $this->container['amount_caption'];
    }

    /**
     * Sets amount_caption
     * @param string $amount_caption
     * @return $this
     */
    public function setAmountCaption($amount_caption)
    {
        $this->container['amount_caption'] = $amount_caption;

        return $this;
    }

    /**
     * Gets reimbursement_rate
     * @return double
     */
    public function getReimbursementRate()
    {
        return $this->container['reimbursement_rate'];
    }

    /**
     * Sets reimbursement_rate
     * @param double $reimbursement_rate
     * @return $this
     */
    public function setReimbursementRate($reimbursement_rate)
    {
        $this->container['reimbursement_rate'] = $reimbursement_rate;

        return $this;
    }

    /**
     * Gets bill_expenses
     * @return string
     */
    public function getBillExpenses()
    {
        return $this->container['bill_expenses'];
    }

    /**
     * Sets bill_expenses
     * @param string $bill_expenses
     * @return $this
     */
    public function setBillExpenses($bill_expenses)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge');
        if ((!in_array($bill_expenses, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_expenses', must be one of 'Billable', 'DoNotBill', 'NoCharge'");
        }
        $this->container['bill_expenses'] = $bill_expenses;

        return $this;
    }

    /**
     * Gets invoice_markup_option
     * @return string
     */
    public function getInvoiceMarkupOption()
    {
        return $this->container['invoice_markup_option'];
    }

    /**
     * Sets invoice_markup_option
     * @param string $invoice_markup_option
     * @return $this
     */
    public function setInvoiceMarkupOption($invoice_markup_option)
    {
        $allowed_values = array('Percent', 'Amount', 'Mile');
        if ((!in_array($invoice_markup_option, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'invoice_markup_option', must be one of 'Percent', 'Amount', 'Mile'");
        }
        $this->container['invoice_markup_option'] = $invoice_markup_option;

        return $this;
    }

    /**
     * Gets invoice_markup_amount
     * @return double
     */
    public function getInvoiceMarkupAmount()
    {
        return $this->container['invoice_markup_amount'];
    }

    /**
     * Sets invoice_markup_amount
     * @param double $invoice_markup_amount
     * @return $this
     */
    public function setInvoiceMarkupAmount($invoice_markup_amount)
    {
        $this->container['invoice_markup_amount'] = $invoice_markup_amount;

        return $this;
    }

    /**
     * Gets advanced_amount_flag
     * @return bool
     */
    public function getAdvancedAmountFlag()
    {
        return $this->container['advanced_amount_flag'];
    }

    /**
     * Sets advanced_amount_flag
     * @param bool $advanced_amount_flag
     * @return $this
     */
    public function setAdvancedAmountFlag($advanced_amount_flag)
    {
        $this->container['advanced_amount_flag'] = $advanced_amount_flag;

        return $this;
    }

    /**
     * Gets mileage_flag
     * @return bool
     */
    public function getMileageFlag()
    {
        return $this->container['mileage_flag'];
    }

    /**
     * Sets mileage_flag
     * @param bool $mileage_flag
     * @return $this
     */
    public function setMileageFlag($mileage_flag)
    {
        $this->container['mileage_flag'] = $mileage_flag;

        return $this;
    }

    /**
     * Gets quantity_flag
     * @return bool
     */
    public function getQuantityFlag()
    {
        return $this->container['quantity_flag'];
    }

    /**
     * Sets quantity_flag
     * @param bool $quantity_flag
     * @return $this
     */
    public function setQuantityFlag($quantity_flag)
    {
        $this->container['quantity_flag'] = $quantity_flag;

        return $this;
    }

    /**
     * Gets inactive_flag
     * @return bool
     */
    public function getInactiveFlag()
    {
        return $this->container['inactive_flag'];
    }

    /**
     * Sets inactive_flag
     * @param bool $inactive_flag
     * @return $this
     */
    public function setInactiveFlag($inactive_flag)
    {
        $this->container['inactive_flag'] = $inactive_flag;

        return $this;
    }

    /**
     * Gets max_amount
     * @return double
     */
    public function getMaxAmount()
    {
        return $this->container['max_amount'];
    }

    /**
     * Sets max_amount
     * @param double $max_amount
     * @return $this
     */
    public function setMaxAmount($max_amount)
    {
        $this->container['max_amount'] = $max_amount;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Expense\Spinen\ConnectWise\Clients\Expense\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Expense\Spinen\ConnectWise\Clients\Expense\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Expense\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Expense\ObjectSerializer::sanitizeForSerialization($this));
    }
}


